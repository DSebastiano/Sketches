package com.practice.rubrica.repository;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;

import org.springframework.transaction.annotation.Transactional;

import com.practice.rubrica.entities.Contatti;

public abstract class AbstractRep<I extends Serializable> 
	implements GenericRep<I> {
	
	@PersistenceContext
	protected EntityManager entityManager;
	
	protected final Class<I> entityClass;
	
	@SuppressWarnings("unchecked")
	public AbstractRep()
	{
		this.entityClass = (Class<I>) ((ParameterizedType)
				this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}
	
	@Override
	public I selById(Long id) {
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();
		CriteriaQuery<I> queryDefinition = builder.createQuery(this.entityClass);

		Root<I> recordSet = queryDefinition.from(this.entityClass);
		
		queryDefinition.select(recordSet).where(builder.equal(recordSet.get("id_contatto"), id));
		
		return this.entityManager.createQuery(queryDefinition).getSingleResult();
	}
	
	@Override
	public List<I> selTutti(String searchString) {
		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<I> queryDefinition = cb.createQuery(I.class);
		
		Root<I> recordset = queryDefinition.from(I.class);
		
		ParameterExpression<String> param = cb.parameter(String.class);
		
		queryDefinition.select(recordset).where(cb.or(
				cb.like(recordset.get("num_tel"), param ),
				cb.like(recordset.get("nome"), param ),
				cb.like(recordset.get("cognome"), param )));
		
		TypedQuery<Contatti> query = entityManager.createQuery(queryDefinition);
		query.setParameter(param, "%" + searchString + "%");
		
		return query.getResultList();
	}
	
	@Override
	public List<I> selTutti() {
		CriteriaBuilder builder = this.entityManager.getCriteriaBuilder();
		CriteriaQuery<I> query = builder.createQuery(this.entityClass);
		
		return this.entityManager.createQuery(
				query.select(query.from(this.entityClass))).getResultList();
	}
	
	@Override
	@Transactional
	public void inserisci(I entity)
	{
		this.entityManager.persist(entity);
		flushAndClear();
	}
	
	private void flushAndClear() {
	    entityManager.flush();
	    entityManager.clear();
	}

}
