package com.practice.rubrica.controllers;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.view.RedirectView;

import com.practice.rubrica.entities.Chiamate;
import com.practice.rubrica.entities.Contatti;
import com.practice.rubrica.services.ChiamateService;
import com.practice.rubrica.services.ContattiService;

@RestController
@RequestMapping("/api")
public class Controller {

	@Autowired
	private ContattiService contattiService;
	
	@Autowired
	private ChiamateService chiamateService;
	
	/* ----- GET dei singoli elementi: contatto e chiamata ----- */
	
	@GetMapping("/contatti/{idContatto}")
	EntityModel<Contatti> selContatto(@PathVariable Long idContatto) {
		Contatti contatto = contattiService.selContatto(idContatto);
		
		return new EntityModel<>(contatto,
				linkTo(methodOn(Controller.class).selContatto(idContatto)).withSelfRel(),
				linkTo(methodOn(Controller.class).nuovaChiamata(idContatto)).withRel("effettua chiamata"),
				linkTo(methodOn(Controller.class).attivaFav(idContatto)).withRel("cambia stato di preferenza"),
			    linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti"));
	}
	
	@GetMapping("/chiamate/{idChiamata}")
	EntityModel<Chiamate> selChiamata(@PathVariable Long idChiamata) {
		Chiamate chiamata = chiamateService.selChiamata(idChiamata);
		
		return new EntityModel<>(chiamata,
				linkTo(methodOn(Controller.class).selContatto(idChiamata)).withSelfRel(),
			    linkTo(methodOn(Controller.class).selChiamate()).withRel("storico chiamate"));
	}
	
	/* ----- GET delle liste di elementi: contatti e chiamati, generali e condizionali ----- */
	
	@GetMapping("/contatti")
	CollectionModel<EntityModel<Contatti>> selContatti() {
		List<EntityModel<Contatti>> contatti = contattiService.selTutti().stream()
				.map(contatto -> new EntityModel<Contatti>(contatto,
				      linkTo(methodOn(Controller.class).selContatto(contatto.getId_contatto())).withSelfRel(),
				      linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti")))
			    .collect(Collectors.toList());
		
		return new CollectionModel<>(contatti,
			    linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti"));
	}
	
	@GetMapping("/contatti/cerca")
	CollectionModel<EntityModel<Contatti>> cercaContatti(@RequestParam(value = "searchString", required = false) String searchString) {
		List<EntityModel<Contatti>> contatti = contattiService.selTutti(searchString).stream()
				.map(contatto -> new EntityModel<Contatti>(contatto,
				      linkTo(methodOn(Controller.class).selContatto(contatto.getId_contatto())).withSelfRel(),
				      linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti")))
			    .collect(Collectors.toList());
		
		return new CollectionModel<>(contatti,
			    linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti"));
	}
	
	@GetMapping("/contatti/preferiti")
	CollectionModel<EntityModel<Contatti>> selPreferiti() {
		List<EntityModel<Contatti>> preferiti = contattiService.selPreferiti().stream()
				.map(contatto -> new EntityModel<Contatti>(contatto,
				      linkTo(methodOn(Controller.class).selContatto(contatto.getId_contatto())).withSelfRel(),
				      linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti")))
			    .collect(Collectors.toList());
		
		return new CollectionModel<>(preferiti,
			    linkTo(methodOn(Controller.class).selContatti()).withRel("visualizza tutti i contatti"));
	}
	
	@GetMapping("/chiamate")
	CollectionModel<EntityModel<Chiamate>> selChiamate() {
		List<EntityModel<Chiamate>> chiamate = chiamateService.selTutti().stream()
				.map(chiamata -> new EntityModel<Chiamate>(chiamata,
				      linkTo(methodOn(Controller.class).selChiamata(chiamata.getId_chiamata())).withSelfRel(),
				      linkTo(methodOn(Controller.class).selChiamate()).withRel("registro chiamate")))
			    .collect(Collectors.toList());
		
		return new CollectionModel<>(chiamate,
			    linkTo(methodOn(Controller.class).selChiamate()).withSelfRel());
	}
	
	/* ----- POST inserimento di nuovi elementi. Nuovo contatto e simulazione chiamata telefonica ----- */
	
	@PostMapping("/contatti")
	RedirectView nuovoContatto(@RequestBody Contatti nuovoContatto) {
		contattiService.inserisci(nuovoContatto);
		Long targetId = nuovoContatto.getId_contatto();
		String RedirectedURL = "http://localhost:8080/api/contatti/" + Long.toString(targetId);
		return new RedirectView(RedirectedURL);
	}
	
	@PostMapping("contatti/{id}/chiama")
	EntityModel<Chiamate> nuovaChiamata(@PathVariable("id") Long id_contatto) {
		Chiamate nuovaChiamata = new Chiamate(id_contatto, new Date());
		chiamateService.inserisci(nuovaChiamata);
		
		return new EntityModel<>(nuovaChiamata,
				linkTo(methodOn(Controller.class).selContatto(id_contatto)).withRel("visualizza contatto chiamato"),
				linkTo(methodOn(Controller.class).selChiamate()).withRel("registro chiamate"));
	}
	
	/* ----- POST inversione status "preferito" ----- */
	
	@PostMapping("/contatti/{id}/attiva-fav")
	RedirectView attivaFav(@PathVariable("id") Long id_contatto) {
		contattiService.attivaFav(id_contatto);
		String RedirectedURL = "http://localhost:8080/api/contatti/" + id_contatto;
		return new RedirectView(RedirectedURL);
	}
	
}
